@using RemoteUpkeep.Properties
@using RemoteUpkeep.Helpers
@model RemoteUpkeep.ViewModels.OrderViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = Resources.Order_Step2_Title;
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("StepTwo", "Order", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "frmOrder" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(m => m.ServiceId)

    <div class="form-group">
        @Html.LabelFor(m => m.RegionId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.RegionId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.RegionId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.HasGeography, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.HasGeography, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group" id="geography-group">
        @Html.LabelFor(m => m.Geography, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.Geography, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.FileIds, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.FileIds, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@Resources.Order_Step2_submit" class="btn btn-primary" />
        </div>
    </div>
}

@section Scripts {

    @Scripts.Render("~/bundles/geography")
    <script src="https://maps.googleapis.com/maps/api/js?key=@Keys.GoogleApiKey&callback=initMap" async defer></script>

    @Styles.Render("~/Content/datetimepicker")
    @Scripts.Render("~/bundles/datetimepicker")

    @Styles.Render("~/Content/fileupload")
    @Scripts.Render("~/bundles/fileupload")

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        $(document).ready(function () {

            $('.datetimepicker').datetimepicker({
                format: '@Resources.DateTimeFormat'
            });

            $('.datepicker').datetimepicker({
                format: '@Resources.DateFormat'
            });

            $('#HasGeography').change(function () {
                if (this.checked) {
                    $('#geography-group').show('slow');
                }
                else {
                    $('#geography-group').hide('slow');
                }
            });

            InitRegionChange();
        });

        $(function () {
            'use strict';

            InitFileUpload('@Url.Action("FileUpload", "Images")', '@Html.IdFor(m => m.FileIds)');
        });

        $.validator.methods.date = function (value, element) {
            return this.optional(element)
                || moment(value, '@Resources.DateFormat').format('@Resources.DateFormat') === value
                || moment(value, '@Resources.DateTimeFormat').format('@Resources.DateTimeFormat') === value;
        }

    </script>
}