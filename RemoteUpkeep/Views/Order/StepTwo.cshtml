@using RemoteUpkeep.Properties
@using RemoteUpkeep.Helpers
@model RemoteUpkeep.ViewModels.OrderViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Please enter more information";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("StepTwo", "Order", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "frmOrder" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.ServiceId)

    <div class="form-group">
        @Html.LabelFor(model => model.RegionId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RegionId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RegionId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HasGeography, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HasGeography, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group" id="geography-group">
        @Html.LabelFor(model => model.Geography, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Geography, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Images, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Images, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Finish Order" class="btn btn-default" />
        </div>
    </div>
}

@section Scripts {

    @Scripts.Render("~/bundles/geography")
    <script src="https://maps.googleapis.com/maps/api/js?key=@Keys.GoogleApiKey&callback=initMap" async defer></script>

    @Styles.Render("~/Content/datetimepicker")
    @Scripts.Render("~/bundles/datetimepicker")

    @Styles.Render("~/Content/jQuery-File-Upload")
    @Scripts.Render("~/bundles/jQuery-File-Upload")

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        $(document).ready(function () {

            $('.datetimepicker').datetimepicker({
                format: '@Resources.DateTimeFormat'
            });

            $('.datepicker').datetimepicker({
                format: '@Resources.DateFormat'
            });

            $('#HasGeography').change(function () {
                if (this.checked) {
                    $('#geography-group').show('slow');
                }
                else {
                    $('#geography-group').hide('slow');
                }
            });

            $('.region').change(function () {
                var selected = $(this).find('option:selected');
                var lat = selected.data('geo-lat');
                var lng = selected.data('geo-lng');
                moveMarker(maps[0], markers[0], lat, lng);
            });

        });

        $(function () {
            'use strict';

            var url = '@Url.Action("FileUpload", "Images")';

            $('#fileupload').fileupload({
                url: url,
                dataType: 'json',
                done: function (e, data) {
                    $.each(data.result.files, function (index, file) {
                        $('<p/>').text(file.name).appendTo('#files');
                        var preVal = $('#Images').val();
                        $('#Images').val(preVal + '|' + file.id);
                    });
                },
                progressall: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#progress .progress-bar').css(
                        'width',
                        progress + '%'
                    );
                }
            }).prop('disabled', !$.support.fileInput)
                .parent().addClass($.support.fileInput ? undefined : 'disabled');
        });

    </script>
}