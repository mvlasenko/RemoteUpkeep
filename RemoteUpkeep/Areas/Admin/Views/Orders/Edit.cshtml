@using RemoteUpkeep.Models
@model Order

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Order</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.CreatedDateTime)

    <div class="form-group">
        @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
        </div>
    </div>

    <!-- order details -->

    <div style="padding-bottom: 10px;">
        <button type="button" class="btn btn-default pull-right create-details">New Target</button>
    </div>

    @{
        int i = 0;
        int count = Model.OrderDetails.Count;
    }
    @foreach (var details in Model.OrderDetails)
    {
        Target target = details.Target;

        <h4>Task @(count > 1 ? i.ToString() : "")in @target.Region.Title</h4>

        @Html.HiddenFor(model => Model.OrderDetails[i].Id)
        @Html.HiddenFor(model => Model.OrderDetails[i].OrderId)

        <div class="form-group">
            @Html.LabelFor(model => Model.OrderDetails[i].OrderStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => Model.OrderDetails[i].OrderStatus, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => Model.OrderDetails[i].OrderStatus, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => Model.OrderDetails[i].Target.Id)
        @Html.HiddenFor(model => Model.OrderDetails[i].TargetId)
        @Html.HiddenFor(model => Model.OrderDetails[i].Target.ChangedDateTime)
        @Html.HiddenFor(model => Model.OrderDetails[i].Target.ChangedByUserId)

        <div class="form-group">
            @Html.LabelFor(model => Model.OrderDetails[i].Target.RegionId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model.OrderDetails[i].Target.RegionId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.OrderDetails[i].Target.RegionId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model.OrderDetails[i].Target.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model.OrderDetails[i].Target.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.OrderDetails[i].Target.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model.OrderDetails[i].Target.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model.OrderDetails[i].Target.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.OrderDetails[i].Target.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model.OrderDetails[i].Target.Geography, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model.OrderDetails[i].Target.Geography, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model.OrderDetails[i].ServiceIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model.OrderDetails[i].ServiceIds, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <!-- actions -->

        <div style="padding-bottom: 10px;">
            <button type="button" class="btn btn-default pull-right create-action">New Action</button>
        </div>
        <h4>
            Actions
        </h4>
        if (Model.OrderDetails[i].Actions != null && Model.OrderDetails[i].Actions.Count > 0)
        {
            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Actions.First().Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Actions.First().DueDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Actions.First().ChangedDateTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Actions.First().AssignedUserId)
                    </th>
                    <th></th>
                </tr>

                @{
                    int action_index = 0;
                }
                @foreach (var action in Model.OrderDetails[i].Actions)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => action.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => action.DueDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => action.ChangedDateTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => action.AssignedUser.FullName)
                        </td>
                        <td align="right">
                            <button type="button" class="btn btn-default edit-action" data-id="@action.Id">Edit</button>
                            <button type="button" class="btn btn-default delete-action" data-id="@action.Id">Delete</button>
                        </td>
                    </tr>

                    action_index++;
                }
            </table>
        }

        <!-- messages -->

        <div style="padding-bottom: 10px;">
            <button type="button" class="btn btn-default pull-right create-message">New Message</button>
        </div>
        <h4>
            Messages
        </h4>
        if (Model.OrderDetails[i].Messages != null && Model.OrderDetails[i].Messages.Count > 0)
        {
            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Messages.First().SenderId)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Messages.First().ReceiverId)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Messages.First().Text)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Messages.First().Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.OrderDetails[i].Messages.First().MessageType)
                    </th>
                    <th></th>
                </tr>

                @{
                    int message_index = 0;
                }
                @foreach (var message in Model.OrderDetails[i].Messages)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => message.SenderId)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => message.ReceiverId)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => message.Text)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => message.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => message.MessageType)
                        </td>
                        <td align="right">
                            <button type="button" class="btn btn-default edit-message" data-id="@message.Id">Edit</button>
                            <button type="button" class="btn btn-default delete-message" data-id="@message.Id">Delete</button>
                        </td>
                    </tr>

                    message_index++;
                }
            </table>
        }

        i++;
    }

    <hr />
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>

</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
